import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';

import { useState, useEffect, use } from 'react';
import { useAccount } from 'wagmi';
import { readContract, prepareWriteContract, writeContract } from '@wagmi/core';

import { ContractFunctionExecutionError } from 'viem';
import { format, set } from 'date-fns';

import InstitutoNacionalElectoral from '../abis/InstitutoNacionalElectoral.json';
import CredencialDigital from '../abis/CredencialDigital.json';
import SistemaPermisos from '../abis/SistemaPermisos.json';
import { id } from 'date-fns/locale';

const direccionPrincipal = '0x5FbDB2315678afecb367f032d93F642f64180aa3';

const handleError = (error: any) => {
    if (error instanceof ContractFunctionExecutionError) {
        if (error.message.includes("SistemaPermisos__AccesoDenegado()")) {
            alert(`Acceso denegado`);
        } else if (error.message.includes("SistemaPermisos__PermisoCaducado()")) {
            alert(`Permiso caducado`);
        } else {
            alert("Ocurri√≥ un error en el contrato");
        }
    } else {
        alert("Ocurri√≥ un error al interactuar con el contrato.");
    }
    console.error("Error:", error);
};

const handleTxError = (error: any) => {
    if (error instanceof Error) {
        alert("Acci√≥n cancelada por el usuario.");
    }
    console.error("Error:", error);
};


function formatUnixEpochTime(unixEpochTime: number | bigint): string {
    const unixEpochTimeAsNumber = typeof unixEpochTime === 'bigint' ? Number(unixEpochTime) : unixEpochTime;
    const formattedDate = format(new Date(unixEpochTimeAsNumber * 1000), 'dd/MM/yyyy HH:mm');
    return formattedDate;
}

var idmx = 0;

const Home: NextPage = () => {
    
    const [isClient, setIsClient] = useState(false);
    const [idUser , setIdUser] = useState<any>(null);
    const { address, isConnected } = useAccount();
    const [sistemaPermisosAddress, setSistemaPermisosAddress] = useState<any>(null);
    
    useEffect(() => {
        setIsClient(true);
    }, []);

    useEffect(() => {
        if (isConnected) {
            readContract({
                address: direccionPrincipal,
                abi: InstitutoNacionalElectoral.abi,
                //account: address,
                functionName: 'verAddressSistemaPermisos',
                args: [],
            }).then((res) => {
                setSistemaPermisosAddress(res);
            });
        } else {
            setSistemaPermisosAddress(null);
            setIdUser(null);
            idmx = 0;
        }
    }, [isConnected, address]);


    const search = () => {
        const inputIds = [
            'search_input',
        ];

        const inputs = inputIds.map(id => document.getElementById(id) as HTMLInputElement);
        const values = inputs.map(input => {
            const value = input.value;
            input.value = '';
            return value;
        }
        );
        if (values.includes('')) {
            alert('Ingresa el id');
            return;
        }
        setIdUser(null);
        idmx = 0;
        const idNumber = parseInt(values[0]);

        readContract({
            address: sistemaPermisosAddress,
            abi: SistemaPermisos.abi,
            account: address,
            functionName: 'verDatos',
            args: [idNumber],
        }).then((res) => {
            idmx = idNumber;
            setIdUser(res);
            console.log(res);
        });
    };



    return (
        <div className={styles.container}>
            <Head>
                <title>RainbowKit App</title>
                <meta
                    content="Generated by @rainbow-me/create-rainbowkit"
                    name="description"
                />
                <link href="/favicon.ico" rel="icon" />
            </Head>

            <header className={styles.header}>
                <ConnectButton
                    label='Conectar a red'
                    showBalance={{
                        smallScreen: false,
                        largeScreen: true,
                    }}
                    accountStatus="address"
                    chainStatus={{
                        smallScreen: "none",
                        largeScreen: "icon",
                    }}
                />
            </header>


            <main className={styles.main}>
                
                {isClient && isConnected ? (
                    <>
                    <div className={styles.container__twoSideByside}>
                        <div className={styles.container__leftSide}>
                            <h2>Tus datos</h2>
                            <p className={styles.addressText}>Firma publica: {address}</p>
                        </div>
                    </div>
                    <div className={styles.container__twoSideByside}>
                        <div className={styles.container__leftSide}>
                            <h2>Busqueda de datos</h2>
                                <input
                                    type="number"
                                    id="search_input"
                                    placeholder="ID"
                                />
                                <button 
                                className={styles.button__confirmAction}
                                onClick={search}
                                >
                                    Buscar
                                </button>
                        </div>
                        {idUser && idUser[1] !== 0 && (
                            <div className={styles.container__rightSide}>
                                <h2>IDMEXD{idmx.toString()}</h2>
                                <p>Permiso nivel {idUser[1].toString()}</p>
                                <p>Fecha de caduciad de permiso</p>
                                <p>{formatUnixEpochTime(idUser[2])}</p>
                                <br/>
                                <h3>Datos de identidad</h3>
                                <p>Nombre: {idUser[0].identidad.nombre}</p>
                                <p>Apellido Paterno: {idUser[0].identidad.apellidoPaterno}</p>
                                <p>Apellido Materno: {idUser[0].identidad.apellidoMaterno}</p>
                                <p>Genero: {idUser[0].identidad.generoBiologico === '1' ? 'M':'H'}</p>
                                <p>CURP: {idUser[0].curp}</p>
                                {idUser[1] === 1 && (<h3>Datos de Elector</h3>)}
                                {idUser[0].claveElector !== '' && (<p>Clave de elector: {idUser[0].claveElector}</p>)}
                                {idUser[0].fechaRegistro !== 0 && (<p>Fecha de registro: {formatUnixEpochTime(idUser[0].fechaRegistro)}</p>)}
                                {idUser[0].fechaVigencia !== 0 && (<p>Fecha de vigencia: {formatUnixEpochTime(idUser[0].fechaVigencia)}</p>)}
                                {idUser[1] <= 2 && (<h3>Direccion</h3>)}
                                {idUser[0].direccion.calle !== '' && (<p>Calle: {idUser[0].direccion.calle}</p>)}
                                {idUser[0].direccion.codigoPostal !== 0 && (<p>Codigo postal: {idUser[0].direccion.codigoPostal.toString()}</p>)}
                                {idUser[0].direccion.colonia !== '' && (<p>Colonia: {idUser[0].direccion.colonia}</p>)}
                                {idUser[0].direccion.numeroExterior !== 0 && (<p>Numero exterior: {idUser[0].direccion.numeroExterior.toString()}</p>)}
                                {idUser[0].direccion.numeroInterior !== '' && idUser[0].direccion.numeroInterior !== 'n/a' && (<p>numeroInterior: {idUser[0].direccion.numeroInterior}</p>)}
                                {idUser[0].direccion.seccion !== 0 && (<p>Seccion: {idUser[0].direccion.seccion.toString()}</p>)}
                                <button className={styles.button__confirmAction} onClick={ () => {
                                    setIdUser(null);
                                    idmx = 0;
                                }
                                }>Cerrar</button>
                            </div>
                        )}
                    </div>
                    </>
                ) : (
                    <div className={styles.container__twoSideByside}>
                        <div className={styles.cointainer__disconected}>
                            <h2>Desconectado</h2>
                            <p>Conectate a la red para acceder al panel</p>
                        </div>
                    </div>
                )}

                
            </main>

            <footer className={styles.footer}>
                <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
                    Made with ‚ù§Ô∏è by your frens at üåà
                </a>
            </footer>
        </div>
    );
};

export default Home;
